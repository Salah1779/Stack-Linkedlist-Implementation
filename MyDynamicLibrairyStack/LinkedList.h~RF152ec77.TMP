#pragma once

#include <iostream>
#include "Node.h"
using namespace std;



template <class MyType>
class LinkedList {
private:
    Node* head;

public:
    LinkedList();
    void append(MyType val);
    void clear();
    ~LinkedList();
    void insertHead(MyType val);

};
    


template<class MyType>
inline LinkedList<MyType>::LinkedList()
{
    head = nullptr;
}

template<class MyType>
inline void LinkedList<MyType>::append(MyType val)
{
    Node* newNode = new Node(val);
    if (head == nullptr) {
        head = newNode;
    }
    else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

template<class MyType>
inline void LinkedList<MyType>::clear()
{
}

template<class MyType>
inline LinkedList<MyType>::~LinkedList()
{
    clear();
}

template<class MyType>
inline void LinkedList<MyType>::insertHead(MyType)
{
    Node * newNode =new Node
    if (head == nullptr)
        head = newNode;
    else {
        newNode->next = head;
        head = newNode;
    }

}
